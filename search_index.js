var documenterSearchIndex = {"docs":
[{"location":"#KWLinalg","page":"Home","title":"KWLinalg","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Collection of functions to perform linear algebra operations in-place.","category":"page"},{"location":"#Non-allocating-updates-LU-decompositions","page":"Home","title":"Non allocating updates LU decompositions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We extend the function LAPACK.getrf! to provide a pivot-vector ipiv as second argument. In this way, ipiv can be preallocated and LAPACK.getrf!(A, ipiv) does not cause any allocations. This allows one to update LU decompositions in-place.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a matrix A the function lu!(A) still allocates workspaces.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using LinearAlgebra\nn = 5\nA = rand(n, n)\n@allocated D = lu(A) # 384 bytes\n@allocated Di = lu!(A) # 128 bytes","category":"page"},{"location":"","page":"Home","title":"Home","text":"The function LAPACK.getrf! is only available to matrices and always allocates the pivot-vector ipiv. We provide a function LAPACK.getrf!(A, ipiv), such that a pivot vector can be provied and is not allocated everytime. For an lu-decomposition object, this can be used as follows","category":"page"},{"location":"","page":"Home","title":"Home","text":"using KWLinalg\nusing LinearAlgebra\nn = 5\nA = rand(n, n)\nD = lu(A)\n# A is updated\nA .= rand(n, n)\n# We update the LU-decomposition in-place.\nLAPACK.getrf!(D.factors, D.ipiv)","category":"page"},{"location":"","page":"Home","title":"Home","text":"KWLinalg.getrf!","category":"page"},{"location":"#LinearAlgebra.LAPACK.getrf!","page":"Home","title":"LinearAlgebra.LAPACK.getrf!","text":"getrf!(A, ipiv) -> (A, ipiv, info)\n\nCompute the LU factorization of a general M-by-N matrix A. The pivot-vector ipiv can be provided to avoid an allocation. Included by package KWLinalg.\n\n\n\n\n\n","category":"function"},{"location":"#Non-allocating-singular-value-decompositions","page":"Home","title":"Non allocating singular value decompositions","text":"","category":"section"}]
}
